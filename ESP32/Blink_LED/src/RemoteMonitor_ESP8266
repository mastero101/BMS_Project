#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266HTTPClient.h>
#include <Arduino_JSON.h>
#include <U8g2lib.h>
#include <Wire.h>

const char* ssid = "Mastero Wifi";
const char* password = "mastero101";

double watts = 0.0;
double kwhr = 0.0;
double kwhrAcumulado = 0.0; 
char timeStr[20];

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

void setup() {
  u8g2.begin();
  u8g2.setFlipMode(0); // Cambia a 0 si los datos se muestran al revés
  Serial.begin(115200);

  WiFi.begin(ssid, password);
  Serial.println("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to WiFi network with IP Address: ");
  Serial.println(WiFi.localIP());

  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB10_tr); // Establece la fuente
  u8g2.drawStr(0, 15, "Iniciando....."); // Dibuja el texto
  u8g2.sendBuffer();
}

void updateOLED() {
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_ncenB12_tr);
  u8g2.setCursor(0, 15);
  u8g2.print(timeStr);
  u8g2.setCursor(0, 40);
  u8g2.print(watts, 2);
  u8g2.print(" W");
  u8g2.setCursor(0, 60);
  u8g2.print(kwhrAcumulado, 2);
  u8g2.print(" KWhr");
  u8g2.sendBuffer();
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;

    // Primera solicitud HTTP
    http.begin(client, "http://132.145.206.61:3000/data");
    int httpCode = http.GET();
    if (httpCode == HTTP_CODE_OK) {
      String payload = http.getString();
      Serial.println(payload);
      JSONVar jsonArray = JSON.parse(payload);
      JSONVar myObject = jsonArray[0];

      // Extract the values using the appropriate methods
      watts = atof(myObject["watts"]);
      kwhr = atof(myObject["KWhr"]);
      long timestamp = atol(myObject["time"]);
      double timestamp2 = timestamp - 21600;

      // Check if the values are valid
      if (isnan(watts) || isnan(kwhr) || timestamp == 0) {
        Serial.println("Parsing input failed!");
        return;
      }

      // Convert the timestamp to time struct
      struct tm * timeinfo;
      time_t timestamp_t = (time_t)timestamp2;
      timeinfo = gmtime(&timestamp_t);

      // Formatear la cadena de tiempo
      strftime(timeStr, sizeof(timeStr), "%d/%m - %H:%M:%S", timeinfo);

      Serial.print("Watts: ");
      Serial.println(watts);
      Serial.print("KWhr: ");
      Serial.println(kwhr);
      Serial.print("Time: ");
      Serial.println(asctime(timeinfo));

      // Segunda solicitud HTTP
      HTTPClient http2;
      http2.begin(client, "http://132.145.206.61:3000/kwhr");
      int httpCode2 = http2.GET();
      if (httpCode2 == HTTP_CODE_OK) {
        String payload2 = http2.getString();
        Serial.println(payload2);

        payload2.replace("[{\"KWhrAcumulado\":", "");
        payload2.replace("}]", "");
        
        // Obtener valor numérico como double
        kwhrAcumulado = payload2.toDouble();
        
        // Mostrar el valor en la consola
        Serial.print("KWhrAcumulado: ");
        Serial.println(kwhrAcumulado, 2);

        updateOLED();

      } else {
        Serial.println("HTTP GET failed (second request)");
      }
      http2.end();
    } else {
      Serial.println("HTTP GET failed (first request)");
    }
    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }
  delay(30000); // Esperar 30 segundos antes de la siguiente lectura
}
